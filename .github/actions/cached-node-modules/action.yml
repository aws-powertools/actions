name: 'Cached Node Modules'
description: 'A simple action to cache node_modules or install them if they are not cached'
inputs:
  nodeVersion: # id of input
    description: 'Node.js version to use in the cache key'
    default: '20'
  build:
    description: 'Whether to build the packages or not'
    default: 'true'
outputs:
  cache-hit:
    description: 'Whether the cache was hit or not'
    value: ${{ steps.cache-node-modules.outputs.cache-hit }}
runs:
  using: "composite"
  steps:
    - name: Cache node modules
      id: cache-node-modules
      uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
      with:
        path: '**/node_modules'
        # Use the combo between node version, name, and SHA-256 hash of the lock file as cache key so that
        # if one of them changes the cache is invalidated/discarded
        key: ${{ inputs.nodeVersion }}-cache-node-modules-${{ hashFiles('./package-lock.json') }}
    - name: Install dependencies
      # We can skip the installation if there was a cache hit
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: npm ci
      shell: bash
    - name: Build packages
      # Regardless of whether the cache was hit or not, we need to build the packages, unless the caller says otherwise
      if: inputs.build == 'true'
      run: |
        echo "No build script defined for this project. Skipping..."
      shell: bash